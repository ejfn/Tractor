name: EAS Update

on:
  push:
    branches: [ main ]
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'  # Semver tags like v1.2.3
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Branch name to deploy (defaults to GitHub ref)'
        required: false
        type: string

# Prevent concurrent deployments due to rate limits
concurrency:
  group: eas-update
  cancel-in-progress: false  # Queue deployments instead of canceling

jobs:
  eas-update:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full git history for accurate commit counting

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install EAS CLI globally
      run: npm install -g eas-cli

    - name: Setup Expo
      uses: expo/expo-github-action@v8
      with:
        expo-version: latest
        eas-version: latest
        token: ${{ secrets.EXPO_TOKEN }}

    - name: Set deployment variables
      id: vars
      run: |
        # Get git info
        GIT_COMMIT=$(git rev-parse HEAD)
        echo "GIT_COMMIT=$GIT_COMMIT" >> $GITHUB_OUTPUT
        
        # Get base version and commit count
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        echo "DEBUG: LAST_TAG='$LAST_TAG'"
        if [[ -n "$LAST_TAG" ]]; then
          BASE_VERSION=${LAST_TAG#v}
          COMMIT_COUNT=$(git rev-list --count ${LAST_TAG}..HEAD)
          echo "DEBUG: Found tag $LAST_TAG, BASE_VERSION=$BASE_VERSION, COMMIT_COUNT=$COMMIT_COUNT"
        else
          BASE_VERSION="1.0.0"
          COMMIT_COUNT=$(git rev-list --count HEAD)
          echo "DEBUG: No tags found, BASE_VERSION=$BASE_VERSION, COMMIT_COUNT=$COMMIT_COUNT"
        fi
        
        # Determine deployment based on trigger
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          # Production release from tag
          VERSION="${GITHUB_REF#refs/tags/}"
          EAS_BRANCH="production"
          MESSAGE="Release $VERSION"
          
        elif [[ $GITHUB_REF == refs/heads/main ]]; then
          # Beta release from main
          VERSION="v${BASE_VERSION}-beta.${COMMIT_COUNT}"
          EAS_BRANCH="beta"
          MESSAGE="Beta release $VERSION"
          
        elif [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
          # Alpha build from PR
          BRANCH_NAME="${{ github.head_ref }}"
          ALPHA_ID=${BRANCH_NAME//\//.}
          VERSION="v${BASE_VERSION}-alpha.${ALPHA_ID}.${COMMIT_COUNT}"
          EAS_BRANCH="alpha"
          MESSAGE="Alpha build from $BRANCH_NAME branch (PR #${{ github.event.number }})"
          
        else
          # Alpha build from other branch
          BRANCH_NAME="${{ inputs.branch_name }}"
          if [[ -z "$BRANCH_NAME" ]]; then
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
          fi
          ALPHA_ID=${BRANCH_NAME//\//.}
          VERSION="v${BASE_VERSION}-alpha.${ALPHA_ID}.${COMMIT_COUNT}"
          EAS_BRANCH="alpha"
          MESSAGE="Alpha build from $BRANCH_NAME branch"
        fi
        
        # Output variables
        echo "EAS_BRANCH=$EAS_BRANCH" >> $GITHUB_OUTPUT
        echo "EAS_MESSAGE=$MESSAGE" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Deploying to $EAS_BRANCH with version: $VERSION"

    - name: Inject version into app.json
      run: |
        # Use jq to inject version and git commit into app.json extra field
        jq '.expo.extra.version = "${{ steps.vars.outputs.VERSION }}" | .expo.extra.gitCommit = "${{ steps.vars.outputs.GIT_COMMIT }}"' app.json > app.json.tmp
        mv app.json.tmp app.json
        echo "Injected version ${{ steps.vars.outputs.VERSION }} into app.json"

    - name: EAS Update
      run: npx eas update --branch ${{ steps.vars.outputs.EAS_BRANCH }} --message "${{ steps.vars.outputs.EAS_MESSAGE }}"
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}