name: 'Git Version'
description: 'Detect version from GitHub context and inject into app.json for EAS workflows'

outputs:
  full-version:
    description: 'The full version with git hash (e.g., v1.0.0+abc1234)'
    value: ${{ steps.detect.outputs.full-version }}
  app-version:
    description: 'The app version for OTA compatibility (e.g., v1.0.0)'
    value: ${{ steps.detect.outputs.app-version }}
  eas-branch:
    description: 'EAS Update branch'
    value: ${{ steps.detect.outputs.eas-branch }}

runs:
  using: 'composite'
  steps:
    - name: Detect version and context
      id: detect
      shell: bash
      run: |
        # Get git info
        GIT_COMMIT=$(git rev-parse HEAD)
        GIT_HASH_SHORT=$(git rev-parse --short HEAD)
        
        # Get base version and commit count (only look for version tags)
        LAST_TAG=$(git tag -l "v*.*.*" --sort=-version:refname | head -n1 || echo "")
        if [[ -n "$LAST_TAG" ]]; then
          LAST_VERSION=${LAST_TAG#v}
          # Increment minor version by 1 and reset patch to 0
          MAJOR=$(echo $LAST_VERSION | cut -d. -f1)
          MINOR=$(echo $LAST_VERSION | cut -d. -f2)
          BASE_VERSION="${MAJOR}.$((MINOR + 1)).0"
          COMMIT_COUNT=$(git rev-list --count ${LAST_TAG}..HEAD)
        else
          BASE_VERSION="1.0.0"
          COMMIT_COUNT=$(git rev-list --count HEAD)
        fi
        
        if [ "${{ github.event_name }}" = "release" ]; then
          # Release event - normalize to major.minor.0 for OTA compatibility
          RAW_VERSION="${{ github.event.release.tag_name }}"
          if [[ $RAW_VERSION =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            APP_VERSION="v${MAJOR}.${MINOR}.0"
          else
            APP_VERSION="$RAW_VERSION"
          fi
          FULL_VERSION="${RAW_VERSION}+${GIT_HASH_SHORT}"
          EAS_BRANCH="production"
          
        elif [[ ${{ github.ref }} == refs/tags/v* ]]; then
          # Tag push - normalize to major.minor.0 for OTA compatibility  
          RAW_VERSION="${{ github.ref_name }}"
          if [[ $RAW_VERSION =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            APP_VERSION="v${MAJOR}.${MINOR}.0"
          else
            APP_VERSION="$RAW_VERSION"
          fi
          FULL_VERSION="${RAW_VERSION}+${GIT_HASH_SHORT}"
          EAS_BRANCH="production"
          
        elif [[ ${{ github.ref }} == refs/heads/main ]]; then
          # Main branch push
          APP_VERSION="v${BASE_VERSION}-beta.${COMMIT_COUNT}"
          FULL_VERSION="v${BASE_VERSION}-beta.${COMMIT_COUNT}+${GIT_HASH_SHORT}"
          EAS_BRANCH="beta"
          
        else
          # Other branch (manual trigger)
          BRANCH_NAME="${{ github.event.inputs.branch_name }}"
          if [[ -z "$BRANCH_NAME" ]]; then
            BRANCH_NAME=${{ github.ref }}
            BRANCH_NAME=${BRANCH_NAME#refs/heads/}
          fi
          APP_VERSION="v${BASE_VERSION}-alpha.${COMMIT_COUNT}"
          FULL_VERSION="v${BASE_VERSION}-alpha.${COMMIT_COUNT}+${GIT_HASH_SHORT}"
          EAS_BRANCH="alpha"
        fi
        
        # Set all outputs
        echo "full-version=$FULL_VERSION" >> $GITHUB_OUTPUT
        echo "app-version=$APP_VERSION" >> $GITHUB_OUTPUT
        echo "eas-branch=$EAS_BRANCH" >> $GITHUB_OUTPUT
        
        # Verbose output for debugging
        echo "Final outputs:"
        echo "  full-version: $FULL_VERSION"
        echo "  app-version: $APP_VERSION"
        echo "  eas-branch: $EAS_BRANCH"

    - name: Inject version into app.json
      shell: bash
      run: |
        jq '.expo.version = "${{ steps.detect.outputs.app-version }}" | .expo.extra.version = "${{ steps.detect.outputs.full-version }}" | .expo.updates.requestHeaders."expo-channel-name" = "${{ steps.detect.outputs.eas-branch }}"' app.json > app.json.tmp
        mv app.json.tmp app.json
        echo "Injected app version ${{ steps.detect.outputs.app-version }}, full version ${{ steps.detect.outputs.full-version }}, and channel ${{ steps.detect.outputs.eas-branch }} into app.json"
